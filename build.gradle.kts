/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    kotlin("multiplatform") version "1.4.21"
    kotlin("plugin.serialization") version "1.4.21"
    id("io.kotest") version "0.2.6"
}

repositories {
    jcenter()
    mavenCentral()
}

group = "io.github.animatedledstrip"
version = "0.9-SNAPSHOT"
description = "io.github.animatedledstrip:animatedledstrip-core"
//java.sourceCompatibility = JavaVersion.VERSION_1_8


//publishing {
//    publications.create<MavenPublication>("maven") {
//        from(components["java"])
//    }
//}

//tasks.withType<JavaCompile>() {
//    options.encoding = "UTF-8"
//}

kotlin {
    jvm {
        compilations.all {
            kotlinOptions.jvmTarget = "1.8"
        }
    }
    js(LEGACY) {
        browser {
            testTask {
                useKarma {
                    useChromeHeadless()
                    webpackConfig.cssSupport.enabled = true
                }
            }
        }
    }
    val hostOs = System.getProperty("os.name")
    val isMingwX64 = hostOs.startsWith("Windows")
    val nativeTarget = when {
        hostOs == "Mac OS X" -> macosX64("native")
        hostOs == "Linux" -> linuxX64("native")
        isMingwX64 -> mingwX64("native")
        else -> throw GradleException("Host OS is not supported in Kotlin/Native.")
    }


    sourceSets {
        val commonMain by getting
        val commonTest by getting {
            dependencies {
                implementation(kotlin("test-common"))
                implementation(kotlin("test-annotations-common"))
                implementation("io.kotest:kotest-assertions-core:4.3.2")
            }
        }
        val jvmMain by getting {
            dependencies {
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.1")
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2")
                implementation("org.tinylog:tinylog:1.3.6")
                implementation("com.google.code.gson:gson:2.8.6")
            }
        }
        val jvmTest by getting {
            dependencies {

//                implementation(kotlin("test-junit"))
                implementation("io.kotest:kotest-runner-junit5:4.3.2")
                implementation("org.jetbrains.kotlin:kotlin-test-junit:1.4.21")
//                implementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
                implementation("io.mockk:mockk:1.10.0")
                implementation("io.kotest:kotest-framework-engine-jvm:4.3.2")
            }
        }
        val jsMain by getting
        val jsTest by getting {
            dependencies {
                implementation(kotlin("test-js"))
            }
        }
        val nativeMain by getting
        val nativeTest by getting
    }

}

tasks.named<Test>("jvmTest") {
    useJUnitPlatform()
    filter {
        setFailOnNoMatchingTests(false)
    }
    testLogging {
        showExceptions = true
        showStandardStreams = true
        events = setOf(org.gradle.api.tasks.testing.logging.TestLogEvent.FAILED, org.gradle.api.tasks.testing.logging.TestLogEvent.PASSED)
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
    }
}
